package DataTypes
public
	with Data_model;
	with Base_types;
	
    data NMEA2000_Header
    properties
        Data_Size => 29 bits;
    end NMEA2000_Header;
    
    data Priority
    	properties
        	Data_Size => 3 bits;	
    end Priority;
    
    data PGN
    	properties
        	Data_Size => 18 bits;	
    end PGN;
    
    data Source_Address
    	properties
        	Data_Size => 8 bits;	
    end Source_Address;

    data implementation NMEA2000_Header.impl
    subcomponents
        PGN: data PGN;
        Priority: data Priority;
        Source_Address: data Source_Address;
    end NMEA2000_Header.impl;
    
    
    data ApparentWindDirection extends NMEA2000_Header 
		properties
			Data_Model::Data_Representation => Integer;
            Data_Model::base_type => (classifier (Base_Types::Integer));
            Data_Size => 37 bits;
	end ApparentWindDirection;
	
	data ApparentWindSpeed extends NMEA2000_Header
    	properties
	        Data_Model::Data_Representation => Integer;
	        Data_Model::base_type => (classifier (Base_Types::Integer));
	        Data_Size => 37 bits;
	end ApparentWindSpeed;
	
	data RealWindSpeed extends NMEA2000_Header
    	properties
	        Data_Model::Data_Representation => Integer;
	        Data_Model::base_type => (classifier (Base_Types::Integer));
	        Data_Size => 37 bits;
	end RealWindSpeed;
	
	data RealWindDirection extends NMEA2000_Header
		properties
			Data_Model::Data_Representation => Integer;
            Data_Model::base_type => (classifier (Base_Types::Integer));
            Data_Size => 37 bits;
	end RealWindDirection;
	
	data Compass extends NMEA2000_Header
    	properties
	        Data_Model::Data_Representation => Integer;
	        Data_Model::base_type => (classifier (Base_Types::Integer));
	        Data_Size => 38 bits;
	end Compass;
	
	data GPSPosition extends NMEA2000_Header
    	properties
	        Data_Model::Data_Representation => String;
	        Data_Model::base_type => (classifier (Base_Types::String));
	        Data_Size => 149 bits;
	end GPSPosition;
	
	data Depth extends NMEA2000_Header
	    properties
	        Data_Model::Data_Representation => Integer;
	        Data_Model::base_type => (classifier (Base_Types::Integer));
	        Data_Size => 36 bits;
	end Depth;
	
	data Gyroscope extends NMEA2000_Header
	    properties
	        Data_Model::Data_Representation => Integer;
	        Data_Model::base_type => (classifier (Base_Types::Integer));
	        Data_Size => 8 Bytes;
	end Gyroscope;
	
	data SOG extends NMEA2000_Header
	    properties
	        Data_Model::Data_Representation => Integer;
	        Data_Model::base_type => (classifier (Base_Types::Integer));
	        Data_Size => 36 bits;
	end SOG;
	
	data CompassCourse extends NMEA2000_Header
	    properties
	        Data_Model::Data_Representation => Integer;
	        Data_Model::base_type => (classifier (Base_Types::Integer));
	        Data_Size => 38 bits;
	end CompassCourse;

	data GPSCourse extends NMEA2000_Header
	    properties
	        Data_Model::Data_Representation => String;
	        Data_Model::base_type => (classifier (Base_Types::String));
	        Data_Size => 38 bits;
	end GPSCourse;
	
	data CurrentHeel extends NMEA2000_Header
	    properties
	        Data_Model::Data_Representation => Integer;
	        Data_Model::base_type => (classifier (Base_Types::Integer));
	        Data_Size => 8 Bytes;
	end CurrentHeel;
	
	data AISUnits extends NMEA2000_Header
	    properties
	        Data_Model::Data_Representation => String;
	        Data_Model::base_type => (classifier (Base_Types::String));
	        Data_Size => 8 Bytes;
	end AISUnits;
	
	data RudderPosition extends NMEA2000_Header
        properties
            Data_Model::Data_Representation => Integer;
            Data_Model::base_type => (classifier (Base_Types::Integer));
            Data_Size => 36 bits;
    end RudderPosition;
    
    data AutoNavigation extends NMEA2000_Header
        properties
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("OFF", "WIND", "DIRECT");
    end AutoNavigation;
  
  
end DataTypes;